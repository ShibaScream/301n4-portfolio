var blogController=function(){"use strict";var l={};return l.show=function(l,t){blogView.initPage(l.articles)},l.loadAll=function(l,t){var a=function(){l.articles=blogData.all,t()};blogData.all.length?a():blogData.fetchAll(a)},l}();
var blogData=function(){"use strict";function t(t){Object.keys(t).forEach(function(a,l,e){this[a]=t[a]},this)}return t.all=[],t.loadAll=function(a){this.all=a.sort(function(t,a){return new Date(a.publishedOn)-new Date(t.publishedOn)}).map(function(a){return new t(a)})},t.fetchAll=function(a){localStorage.articleData&&"undefined"!==localStorage.articleData?(this.loadAll(JSON.parse(localStorage.articleData)),a()):$.getJSON("../data/articleData.json",function(l){t.loadAll(l),localStorage.setItem("articleData",JSON.stringify(t.all)),a()}).fail(function(t,a){console.error("Blog failed to load. Error: ",a)})},t}();
var blogView=function(){"use strict";var e={templateScript:$("#portfolioTemplate").html(),theTemplate:null};return e.setTeasers=function(){$(".article-body *:nth-of-type(n+2)").hide();var e=$("#projects");e.on("click","a.read-on",function(e){e.preventDefault(),$(this).parent().find("*").fadeIn(),$(this).hide(),$(this).parent().find("a.read-less").show()}),e.on("click","a.read-less",function(e){e.preventDefault(),$(".article-body *:nth-of-type(n+2)").hide(),$(this).hide(),$(this).parent().find("a.read-on").show()})},e.toHTML=function(t){return t.daysAgo=parseInt((new Date-new Date(t.publishedOn))/60/60/24/1e3,10),t.publishStatus=t.publishedOn?"published "+t.daysAgo+" days ago":"(draft)",this.theTemplate=Handlebars.compile(e.templateScript),this.theTemplate(t)},e.initPage=function(t){$(".section-view").hide();var n=$("#projects");n.empty(),t.forEach(function(t){n.append(e.toHTML(t))}),$("pre code").each(function(e,t){hljs.highlightBlock(t)}),e.setTeasers(),n.show()},e}();
var contactController=function(){"use strict";var t={};return t.show=function(){$(".section-view").hide(),$("#contact").show()},t}();
var indexController=function(){"use strict";var e={};return e.show=function(){$(".section-view").hide(),$("#home").show(),repos.requestRepos(reposView.index)},e}();
!function(){"use strict";var e={};e.toggleMobileMenu=function(){var e=$("#menu"),i=$("#mobilemenu");i.on("click",function(){e.find("ul").fadeToggle("fast")}),e.on("click",function(){"block"===i.css("display")&&e.find("ul").fadeToggle("fast")})},e.hideMobileMenu=function(){$("#menu").find("ul").fadeOut("fast")},e.checkSize=function(){"block"===$("#mobilemenu").css("display")?$("main").on("click",e.hideMobileMenu):$("main").off("click",e.hideMobileMenu)},$(document).ready(function(){e.toggleMobileMenu(),e.checkSize(),$(window).resize(_.debounce(e.checkSize,500))})}();
var repos=function(){"use strict";var e={};return e.all=[],e.requestRepos=function(r){$.ajax({url:"/github/users/ShibaScream/repos?per_page=100&sort=updated",type:"GET",success:function(r,t,u){e.all=r}}).done(r)},e.with=function(r){return e.all.filter(function(e){return e[r]})},e}();
var reposView=function(){"use strict";var e={},t=Handlebars.compile($("#repo-template").html());return e.index=function(){var e=$("#github");e.empty(),e.append(repos.with("name").map(t))},e}();
var resumeController=function(){"use strict";var e={};return e.show=function(e,t){resumeView.initPage(e.jobs)},e.loadAll=function(e,t){var a=function(){e.jobs=resumeData.all,t()};resumeData.all.length?a():resumeData.fetchAll(a)},e}();
var resumeData=function(){"use strict";function e(e){Object.keys(e).forEach(function(t,a,o){this[t]=e[t]},this)}return e.all=[],e.loadAll=function(t){this.all=t.sort(function(e,t){return new Date(t.dateFrom)-new Date(e.dateFrom)}).map(function(t){return new e(t)})},e.fetchAll=function(t){localStorage.resumeData&&"undefined"!==localStorage.resumeData?(this.loadAll(JSON.parse(localStorage.resumeData)),t()):$.getJSON("../data/resumeData.json",function(a){e.loadAll(a),localStorage.setItem("resumeData",JSON.stringify(e.all)),t()}).fail(function(e,t,a){console.error("Resume failed to load. Error: ",t)})},e}();
var resumeView=function(){"use strict";var e={templateScript:$("#resumeTemplate").html(),theTemplate:null};return e.toHTML=function(t){return this.theTemplate=Handlebars.compile(e.templateScript),this.theTemplate(t)},e.initPage=function(t){$(".section-view").hide();var i=$("#resume");i.empty(),t.forEach(function(t){i.append(e.toHTML(t))}),i.show()},e}();
page("/",indexController.show),page("/projects",blogController.loadAll,blogController.show),page("/resume",resumeController.loadAll,resumeController.show),page("/contact",contactController.show),page("*",function(){console.error("This should be a 404 Error Page")}),page();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
